# Generated by Django 5.1 on 2024-09-13 13:25

import base.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Имя/Название*')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='ItemBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(verbose_name='Количество*')),
                ('date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Город')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('start_date', models.DateField(verbose_name='Дата брони (начальная)*')),
                ('end_date', models.DateField(verbose_name='Дата брони (конечная)*')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Подтверждение брони')),
            ],
            options={
                'verbose_name': 'Запрос на бронь товаров',
                'verbose_name_plural': 'Запросы на бронь товаров',
            },
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название*')),
            ],
            options={
                'verbose_name': 'Категория товаров',
                'verbose_name_plural': 'Категории товаров',
            },
        ),
        migrations.CreateModel(
            name='ItemStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст*')),
            ],
            options={
                'verbose_name': 'Статус товаров',
                'verbose_name_plural': 'Статусы товаров',
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название*')),
                ('area', models.PositiveIntegerField(blank=True, null=True, verbose_name='Площадь (кв.м.)*')),
                ('free_area', models.PositiveIntegerField(blank=True, default=0, verbose_name='Свободная площадь (кв.м.)')),
            ],
            options={
                'verbose_name': 'Склад',
                'verbose_name_plural': 'Склады',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=128, unique=True, verbose_name='Никнейм*')),
                ('password', models.CharField(max_length=255, verbose_name='Пароль*')),
                ('first_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Отчество')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Имеет доступ к сайту?')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Руководитель/Администратор?*')),
                ('date_joined', models.DateField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('clients', models.ManyToManyField(blank=True, related_name='users', to='base.client', verbose_name='Клиенты')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', base.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('article', models.CharField(max_length=6, primary_key=True, serialize=False, unique=True, verbose_name='Артикул')),
                ('name', models.CharField(max_length=128, verbose_name='Название*')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Масса единицы (кг)')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Высота единицы (см)')),
                ('width', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Ширина единицы (см)')),
                ('length', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Длина единицы (см)')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Количество*')),
                ('arrival_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата прихода*')),
                ('expiration_date', models.DateField(blank=True, null=True, verbose_name='Срок годности (конечная дата)')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='booked_items', to='base.client', verbose_name='Клиент')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='base.itemcategory', verbose_name='Категория')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='base.itemstatus', verbose_name='Состояние')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='ItemBookingItemM2M',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_count', models.PositiveIntegerField(default=0, verbose_name='Количество*')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='base.itembooking', verbose_name='Заявка на бронь')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_items', to='base.item', verbose_name='Товар*')),
            ],
            options={
                'verbose_name': 'Товар на бронь',
                'verbose_name_plural': 'Товары на брони',
            },
        ),
        migrations.AddField(
            model_name='itembooking',
            name='items',
            field=models.ManyToManyField(related_name='bookings', through='base.ItemBookingItemM2M', to='base.item', verbose_name='Товар(-ы)*'),
        ),
        migrations.CreateModel(
            name='ItemConsumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Подтверждено складом')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumptions', to='base.itembooking', verbose_name='Заявка на бронь*')),
            ],
            options={
                'verbose_name': 'Заявка на расход',
                'verbose_name_plural': 'Заявки на расход',
            },
        ),
        migrations.CreateModel(
            name='ItemImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=base.models.get_image_upload_path, verbose_name='Фото')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='base.item', verbose_name='Товар*')),
            ],
            options={
                'verbose_name': 'Фотография товара',
                'verbose_name_plural': 'Фотографии товара',
            },
        ),
        migrations.CreateModel(
            name='ItemRecovery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(verbose_name='Причина*')),
                ('planning_date', models.DateField(verbose_name='Планируемая дата*')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Фактическая дата')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Подтверждение утилизации')),
                ('is_ceo_approved', models.BooleanField(default=False, verbose_name='Утилизация разрешена руководителем')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recoveries', to='base.item', verbose_name='Товар*')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recovered_items', to='base.itemstatus', verbose_name='Статус товара')),
            ],
            options={
                'verbose_name': 'Запрос на утилизацию',
                'verbose_name_plural': 'Запросы на утилизацию',
            },
        ),
        migrations.CreateModel(
            name='ItemStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('existing', 'Заявка на существующий товар'), ('new', 'Заявка на новый товар')], max_length=10, verbose_name='Тип заявки*')),
                ('new_item_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Название нового товара')),
                ('new_item_description', models.TextField(blank=True, null=True, verbose_name='Описание нового товара')),
                ('new_item_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Масса нового товара (кг)')),
                ('new_item_height', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Высота нового товара (см)')),
                ('new_item_width', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Ширина нового товара (см)')),
                ('new_item_length', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Длина нового товара (см)')),
                ('count', models.PositiveIntegerField(verbose_name='Количество*')),
                ('is_approved', models.BooleanField(blank=True, default=False, verbose_name='Подтверждение наличия')),
                ('existing_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_requests', to='base.item', verbose_name='Существующий товар')),
            ],
            options={
                'verbose_name': 'Заявка на приход товара',
                'verbose_name_plural': 'Заявки на приход товара',
                'permissions': [('can_change_sensitive_field', 'Can change sensitive field')],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название*')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='base.client', verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
            },
        ),
        migrations.CreateModel(
            name='ItemRefund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(verbose_name='Количество*')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Подтверждение возврата')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='base.item', verbose_name='Товар*')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='refunded_items', to='base.itemstatus', verbose_name='Статус товара')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='base.project', verbose_name='Проект*')),
            ],
            options={
                'verbose_name': 'Запрос на возвраты',
                'verbose_name_plural': 'Запросы на возвраты',
            },
        ),
        migrations.AddField(
            model_name='itembooking',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='base.project', verbose_name='Проект*'),
        ),
        migrations.AddField(
            model_name='item',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='base.project', verbose_name='Проект'),
        ),
        migrations.AddField(
            model_name='item',
            name='storage',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stored_items', to='base.storage', verbose_name='Склад*'),
        ),
        migrations.CreateModel(
            name='StorageClientM2M',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booked_area', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Зарезервировання площадь (кв.м.)')),
                ('free_booked_area', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Свободная площадь на складе (кв.м.)')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.client', verbose_name='Клиент*')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.storage', verbose_name='Склад*')),
            ],
            options={
                'verbose_name': 'Склад для клиента',
                'verbose_name_plural': 'Склады для клиента',
            },
        ),
        migrations.AddField(
            model_name='storage',
            name='clients',
            field=models.ManyToManyField(related_name='storages', through='base.StorageClientM2M', to='base.client', verbose_name='Клиенты'),
        ),
    ]
